# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import example_pb2 as example__pb2


class ChessPropStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.PointCounterpoint = channel.stream_stream(
        '/ChessProp/PointCounterpoint',
        request_serializer=example__pb2.Move.SerializeToString,
        response_deserializer=example__pb2.ReplyWithJudgement.FromString,
        )


class ChessPropServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def PointCounterpoint(self, request_iterator, context):
    """A Bidirectional streaming RPC.
    Client sends a chess move
    server replies back with the opponent's move and judgement of the position
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ChessPropServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'PointCounterpoint': grpc.stream_stream_rpc_method_handler(
          servicer.PointCounterpoint,
          request_deserializer=example__pb2.Move.FromString,
          response_serializer=example__pb2.ReplyWithJudgement.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ChessProp', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
